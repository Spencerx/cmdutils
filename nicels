#!/usr/bin/env python2.7

"""
Variant of "ls -l" that only shows size, date, and name, and comma-ifies the sizes.
This is handy for data processing and modeling.

Flags
  --color=none to disable color

Example:

          1,192 Apr  4 13:16 NOTES.txt
 19,944,388,440 Apr  2 20:02 extracts.BaseNP+FullNP
 10,853,368,704 Apr  2 19:39 extracts.ShortNP
  3,934,536,932 Apr  2 19:39 extracts.ShortVP
  7,922,904,301 Apr  4 01:01 extracts.VerbPatterns
            483 Apr  4 13:16 go.sh
          5,931 Apr  4 13:41 posphrases.py
         93,517 Apr  4 13:37 semiautomatics.phrases
         29,802 Apr  4 13:43 semiautomatics.phrases.niceview
              4 Apr  2 19:47 v1
    277,599,695 Apr  2 20:08 vocab.BaseNP+FullNP
     65,220,171 Apr  2 19:43 vocab.ShortNP
     31,427,214 Apr  2 19:40 vocab.ShortVP
    135,752,801 Apr  4 01:03 vocab.VerbPatterns
    277,599,695 Apr  2 23:35 vocab.doccounts.BaseNP+FullNP
     65,220,171 Apr  2 23:39 vocab.doccounts.ShortNP
     31,427,214 Apr  2 23:40 vocab.doccounts.ShortVP

This script originally was the following, but doesn't get column alignment right
l () {
    env CLICOLOR_FORCE=1 ls $lsopt_coloralways -l "$@" | grep --color=none -v '^total' | perl -pe 'if (!/^\S+:/) { s/^ *\S+ *\S+ *\S+ *\S+// } '
}
"""

import sys,re,os
PY27 = sys.version_info >= (2,7)

use_color = '--color=none' not in sys.argv

p = os.popen("env {envcolor}CLICOLOR_FORCE=1 ls {coloropts} -l {args}".format(
  envcolor='CLICOLOR_FORCE=1' if use_color else '',
  coloropts='' if not use_color else
            '-G' if 'darwin' in sys.platform else '--color=always',
  args=' '.join('"%s"' % x for x in sys.argv[1:])))

data = p.read()
lines = data.strip().split("\n")
if lines[0].startswith('total'): lines = lines[1:]
# lines = [L for L in lines if L.strip()]

# Coloring at start of line screws up positioning -- from linux GNU ls.
# Below rendered by vim, so ^[ is the ASCII escape control character, but all
# else are literal characters (in particular, a [ after the escape).
# ^[[0m^[[00;32m-rw-r--r--  1 brendano brendano       70 Jul 30  2009 ^[[m^[[00mNOTES^[[0m
# ^[[00;32m-rw-r--r--  1 brendano brendano       53 Dec 12  2009 ^[[m^[[00mNOTES.blog^[[0m
# ^[[00;32mdrwxr-xr-x  3 brendano brendano     4096 Mar  9  2010 ^[[m^[[00;34mR^[[0m
lines = [re.sub('^\033\\[0m',"",L) for L in lines]
lines = [re.sub('^\033\\[00;32m',"",L) for L in lines]
if not lines: sys.exit()


def commaize(s):
    try:
        num = int(s.strip())
    except ValueError:
        return s
    if not PY27:
        return str(num)
    # commaized = ("{:%d,}" % targetlen).format(num)
    # assert len(commaized) <= targetlen
    return "{:,}".format(num)

# Regex matches for the permission, ownership, and size from e.g.
# drwxr-xr-x  3 brendano brendano     4096 Apr 25 22:51 old
# drwxr-xr-x  4 brendano root         4096 Apr 25 22:53 onetime_view
# drwxr-xr-x  8 brendano brendano     4096 Sep 22  2008 onlinepoll

PAT = r'^\s*(\S+\s+){5}'
matches = [re.search(PAT, x) for x in lines]
size_strs = [m.group(0).split()[-1] if m else "" for m in matches]
size_c_strs = [commaize(s) for s in size_strs]
maxlen = max(len(s) for s in size_c_strs)

for size_str, line in zip(size_c_strs, lines):
    m = re.search(PAT, line)
    if m:
        line_after_first5 = re.sub(PAT, "", line)
        newline = " %s %s" % (size_str.rjust(maxlen), line_after_first5)
        print newline
    else:
        print line

