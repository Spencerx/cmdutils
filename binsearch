#!/usr/bin/env python
"""
Assume a plaintext, uncompressed file's lines are in sorted order
  sorted by raw bytes! no locale-specific ordering or anything
  if you use gnu sort, make sure you're using LC_ALL=C
Find the first line that has a prefix equal to a given key.
Using binary search: worst case O(log n) disk seeks and reads
where n is size of file in bytes

commandline mode: print out all lines that have that prefix.
"""

from __future__ import division
import sys,os

class BinaryFileSearcher:

    def __init__(self, filename):
        self.fp = open(filename, 'r')
        self.size = os.stat(filename).st_size

    def close(self):
        self.fp.close()

    def go_to_prev_newline(self,jumpsize=1000):
        while True:
            if self.fp.tell()==0:
                break
            blocksize = min(self.fp.tell(), jumpsize)
            newpos = max(0,  self.fp.tell() - blocksize)
            self.fp.seek(newpos)
            newtext = self.fp.read(blocksize)
            # print repr(newtext)
            if '\n' in newtext:
                for i in xrange(blocksize-1, -1, -1):
                    if newtext[i]=='\n':
                        self.fp.seek(newpos + i + 1)
                        return

            elif len(newtext)==0:
                assert False, "shouldve gotten self.fp.tell() to say zero i think?"
                self.fp.seek(0)
                break
            else:
                self.fp.seek(newpos)
                continue

    def return_two_lines(self, pos):
        self.fp.seek(pos)

        if pos==0:
            return ( (None,None), (pos,self.fp.readline()) )

        self.go_to_prev_newline()
        pos1  = self.fp.tell()
        line1 = self.fp.readline()
        pos2  = self.fp.tell()
        line2 = self.fp.readline()
        return ( (pos1,line1), (pos2,line2) )

    def find_position(self, needle):
        """
        return the byte offset of the first line that contains needle as a prefix.
        return None if no lines in the file match.
        """
        bounds = (0,self.size)
        prevbounds = None
        while True:
            if bounds[0] >= bounds[1]:
                return None
            if bounds==prevbounds:
                print "Failed to find match. TODO might still be buggy"
                return None
            prevbounds = bounds

            midpoint = bounds[0] + int((bounds[1]-bounds[0])/2)
            (p1,l1),(p2,l2) = self.return_two_lines(midpoint)
            if p1 is None:
                assert False, "edge case TODO"
            elif p1==0 and l1.startswith(needle):
                return p1
            elif l1 < needle and l2.startswith(needle):
                return p2
            elif l1 < needle < l2:
                return None
            elif needle < l1:
                bounds = (bounds[0], p1)
            elif needle > l2:
                bounds = (p2, bounds[1])
            else:
                assert False, "TODO unhandled case"

def main(args):
    needle = args[0]
    filename = args[1]

    searcher = BinaryFileSearcher(filename)

    pos = searcher.find_position(needle)

    if pos is None:
        sys.exit(0)

    searcher.fp.seek(pos)
    for line in searcher.fp:
        if line.startswith(needle):
            try:
                sys.stdout.write(line)
            except IOError:
                sys.exit(0)
        else:
            break

if __name__=='__main__':
    main(sys.argv[1:])

