#!/usr/bin/env python2.7

r"""
Summary statistics for a list of numbers or strings (on stdin).
Loosely inspired by R's summary(): call on anything, learn something.
  * Number, number of types (unique values)
  * Value counts -- if small number of unique values
    -c:  force showing these counts
  * Quantiles -- even for strings
  * Mean,SD -- only for numbers


EXAMPLE 1: numbers
% cat /d/yelp/academic_download20150715/by_type/review.json | jq '.stars' | summary

N = 330071      5 unique values Sum = 1207163
Counts  [1:26383 2:34101 3:61577 4:112203 5:95807]
Min   :  1
    25:  3
Median:  4      Mean: 3.657  SD: 1.221  SE: 0.002126
    75:  5
Max   :  5

% perl -ne 'print "$1\n" if /"num_junk":(\d+)/' all.simple_counts | summary

N = 816                 31 unique values
Min   :  1
    25:  5
Median:  11     Mean: 11.36  SD: 7.485  SE: 0.262
    75:  17
Max   :  31

EXAMPLE 2: words
% cat /usr/share/dict/words | summary

N = 235886      No duplicates   
Min   :  A
    25:  colometric
Median:  lenity
    75:  ruddily
Max   :  zythum

"""

from __future__ import division
import os,sys,math
from collections import defaultdict

if '-h' in sys.argv:
  print __doc__.strip()
  sys.exit(1)

def writeln(s):
  sys.stdout.write(s)
  sys.stdout.write("\n")
def write(s):
  sys.stdout.write(s)

def mean(xs, _sum=None):
  if _sum is None: _sum = sum(xs)
  return _sum*1.0 / len(xs)
def sd(xs, m):
  ss = sum( (x-m)**2 for x in xs )
  return math.sqrt(ss / len(xs))

all_float = True
all_int = True

# should use heapq instead of the sort?
items = []
counts = defaultdict(int)
_sum = 0

for line in sys.stdin:
  x = line[:-1]
  if all_float:
    try:
      x = float(x)
      if int(x) != x:
        all_int = False
      else:
        x = int(x)
      _sum += x
    except ValueError: 
      all_float = False
      all_int = False
  items.append(x)
  counts[x] += 1

items.sort()
N = len(items)

write("N = %d" % N)
num_dups = len(items) - len(counts)
if num_dups==0:
  write("\t\tNo duplicates")
elif num_dups == len(items):
  write("\t\tAll duplicates")
else:
  write("\t\t%d unique values" % (len(counts)))
if all_float or all_int:
  write("\t\tSum = %s" % _sum)
write("\n")

if N==0:
  sys.exit()

if (len(counts) <= 10 and num_dups > 0) or '-c' in sys.argv:
  s = ' '.join(['%s:%d' % (w,counts[w]) for w in sorted(counts)])
  print 'Counts\t[' + s + ']'

_min = items[0]
_max = items[-1]

def safe(x):
  x = int(x)
  if x==N:
    x -= 1
  return x

_50 = items[ safe(.5 * N) ]

_05 = items[ safe(.05 * N) ]
_95 = items[ safe(.95 * N) ]

if True:
  writeln("Min   :  %s" % _min)
#if N >= 20: writeln("  5%%ile:  %s" % items[safe(.05*N)])
if N >= 5:
  writeln("    25:  %s" % items[safe(.25*N)])
if True:
  write("Median:  %s" % _50)
  if all_float or all_int:
    m = mean(items)
    write(" \tMean: %.4g" % m)
    _sd = sd(items,m)
    write("  SD: %.4g" % _sd)
    write("  SE: %.4g" % (_sd / math.sqrt(N)))
  write("\n")
if N >= 5:
  writeln("    75:  %s" % items[safe(.75*N)])
#if N >= 20: writeln(" 95%%ile:  %s" % items[safe(.95*N)])
if True:
  writeln("Max   :  %s" % _max)
