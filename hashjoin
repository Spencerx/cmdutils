#!/usr/bin/env python2.7
"""
hashjoin  [options]  LeftFile RightFile

Joins two tabular files via equality on respective key columns you specify.
Implemented via hash indexing so
 * No need for pre-sorting
 * but: Everything (or just the smaller file) must fit into memory

Hopefully this easier to use than unix join.  You don't get weird deceptive
results when the data isn't sorted the way 'join' expects.
"""

import sys,optparse,itertools
from collections import defaultdict

def unique_everseen(iterable, key=None):
    "List unique elements, preserving order. Remember all elements ever seen."
    #http://docs.python.org/library/itertools.html
    # unique_everseen('AAAABBBCCDAABBB') --> A B C D
    # unique_everseen('ABBCcAD', str.lower) --> A B C D
    seen = set()
    seen_add = seen.add
    if key is None:
        for element in iterable:
            if element not in seen:
                seen_add(element)
                yield element
    else:
        for element in iterable:
            k = key(element)
            if k not in seen:
                seen_add(k)
                yield element

p = optparse.OptionParser(usage=__doc__.strip())
p.add_option('-1', type='int', dest='f1', default=1, help="Join key in LeftFile (1-indexed), default 1")
p.add_option('-2', type='int', dest='f2', default=1, help="Join key in RightFile (1-indexed), default 1")
p.add_option('--inner', action='store_const', const='inner', dest='join_mode', help="Do inner join (default)")
p.add_option('--left', action='store_const', const='left', dest='join_mode', help="Do left join")
p.add_option('--outer', action='store_const', const='outer', dest='join_mode', help="Do outer join")
p.add_option('--load-all', action='store_const', dest='load_mode', const='LOAD_ALL', help="Force full loading")
p.add_option('-d','--delim', type='string', default='\t', help="Delimiter, default tab")
opts,args = p.parse_args()
opts.join_mode = opts.join_mode or 'inner'
opts.f1 -= 1  # 0-indexing
opts.f2 -= 1

if len(args) != 2:
  p.print_help()
  sys.exit(1)
file1,file2 = args
file1 = sys.stdin if file1=='-' else open(file1)
file2 = sys.stdin if file2=='-' else open(file2)
assert file1 != file2

def build_index(file, key_index):
  index,keys,records = defaultdict(list), [], []
  for line in file:
    parts = line.rstrip('\n').split(opts.delim)
    key = parts[key_index]
    keys.append(key)
    index[key].append(parts)
    records.append(parts)
  return index,keys,records,records[0]

def prepare_scannable_recordset(file, key_index):
  def inner():
    for line in file:
      parts = line.rstrip('\n').split(opts.delim)
      key = parts[key_index]
      yield key, parts
  gen = inner()
  first_pair = gen.next()  ## TODO assumes nonempty file
  return itertools.chain([first_pair], gen), first_pair[1]

if opts.join_mode in ('left','outer'):
  loadmode = 'LOAD_ALL'
elif opts.join_mode=='inner':
  loadmode = 'SCAN'
else: assert False
if opts.load_mode is not None:
  loadmode = opts.load_mode

if loadmode=='LOAD_ALL':
  # Read everything into memory and index it.
  # keys,records are parallel.
  index1,keys1,records1,firstrec1 = build_index(file1, opts.f1)
  index2,keys2,records2,firstrec2 = build_index(file2, opts.f2)
elif loadmode=='SCAN':
  # Only read one into memory. Scan the other.
  index1,keys1,records1,firstrec1 = build_index(file1, opts.f1)
  keyrecs2,firstrec2 = prepare_scannable_recordset(file2, opts.f2)
else: assert False

## Record-making machinery
numcols1 = len(firstrec1)
numcols2 = len(firstrec2)

def make_record(rec1, rec2):
  assert not (rec1 is None and rec2 is None)
  if rec1 is None:
    rec1 = [''] * numcols1
  elif rec2 is None:
    rec2 = [''] * numcols2
  if opts.join_mode in ('left','inner'):
    # make left dominant with the key, kill it from right record
    rec2 = [x for i,x in enumerate(rec2) if i != opts.f2]
  return rec1 + rec2

def make_and_output_record(rec1, rec2):
  rec = make_record(rec1,rec2)
  sys.stdout.write(opts.delim.join(rec))
  sys.stdout.write("\n")


if loadmode=='LOAD_ALL':

  ## Add in dummy empty records depending on join mode
  if opts.join_mode=='left':
    output_keys = list(unique_everseen(keys1))
  elif opts.join_mode=='inner':
    g = (k for k in keys1 if k in index1 and k in index2)
    output_keys = list(unique_everseen(g))
  elif opts.join_mode=='outer':
    g = itertools.chain(keys1,keys2)
    g = (k for k in g if k in index1 or k in index2)
    output_keys = unique_everseen(g)
  else:
    assert False, "bad join type %s" % (repr(opts.join_mode), )

  ## Final loop
  for key in output_keys:
    for rec1 in index1.get(key, [None]):
      for rec2 in index2.get(key, [None]):
        make_and_output_record(rec1, rec2)

elif loadmode=='SCAN' and opts.join_mode=='inner':
  for key,rec2 in keyrecs2:
    if key not in index1: continue
    for rec1 in index1[key]:
      make_and_output_record(rec1, rec2)

else: assert False

## Scan left-join i think would work like this...
## but this code is untested therefore disabled
#elif loadmode=='SCAN' and opts.join_mode=='left':
#  seen_keys1 = set()
#  for key,rec2 in keyrecs2:
#    if key not in index1: continue
#    seen_keys1.add(key)
#    for rec1 in index1[key]:
#      make_and_output_record(rec1, rec2)
#  for key in (set(index1.iterkeys()) - seen_keys1):
#    make_and_output_record(rec1, None)


# vim: sw=2:sts=2
