#!/usr/bin/env python
"""
dateseq StartDate [EndDate]

Prints sequence of YYYY-MM-DD dates over the specified range.
(Like `seq' or `gseq' but for dates.)
Inclusive of both StartDate and EndDate.
Dates can be underspecified.  Any of these are fine:
  YYYY-MM-DD
  YYYY-MM
  YYYY
  YYYYMMDD
  YYYYMM
Underspecified StartDate uses the left-most day of the range.
Underspecified EndDate uses the right-most day of the range.
If EndDate is missing, use StartDate.  This only makes sense for underspecified
datetimes (I think), you get the sequence over that year or month.
"""


import sys, re
from datetime import datetime, timedelta

if len(sys.argv) < 2:
  print __doc__.strip()
  sys.exit(1)

tests = """
dateseq 2009
dateseq 200911 200912
dateseq 2009-01 2009-02
dateseq 2009-01-05 2009-01-05
dateseq 2009-01
dateseq 2008-12 2009-01
"""

import argparse
p = argparse.ArgumentParser()
p.add_argument("date1")
p.add_argument("date2",nargs='?')
p.add_argument("--test",action='store_true')
p.add_argument("--format", default="%Y-%m-%d")
args = p.parse_args()

if args.test:
  import os
  lines = tests.strip().split("\n")
  for cmd in lines:
    print "\n***", cmd
    os.system(cmd + " | summary")
  sys.exit()

date1 = args.date1
date2 = args.date2 or date1

def parse_datetime(s, mode):
  if re.search(r'^\d\d\d\d-\d\d-\d\d$', s):
    return datetime.strptime(s,'%Y-%m-%d')
  elif re.search('^\d{8}$', s):
    # YYYYMMDD
    return parse_datetime('%s-%s-%s' % (s[:4], s[4:6], s[6:8]), mode)
  elif re.search('^\d{6}$', s):
    # YYYYMM
    return parse_datetime('%s-%s' % (s[:4], s[4:6]), mode)
  elif re.search(r'^\d\d\d\d-\d\d$', s):
    y,m = s.split('-')
    y = int(y)
    m = int(m)
    if mode=='LEFT':
      return datetime(y,m,1)
    elif mode=='RIGHT':
      y,m = (y,m+1) if m<12 else (y+1,1)
      return datetime(y,m,1) - timedelta(days=1)
    else: assert False, "bad mode"
  elif re.search(r'^\d\d\d\d$', s):
    y = int(s)
    if mode=='LEFT':
      return datetime(y,1,1)
    elif mode=='RIGHT':
      return datetime(y+1,1,1) - timedelta(days=1)

  else: assert False, "couldn't parse %s" % repr(s)


date1 = parse_datetime(date1, 'LEFT')
date2 = parse_datetime(date2, 'RIGHT')

#print>>sys.stderr, date1, date2

assert date1 <= date2

d = date1
while d <= date2:
  print d.strftime(args.format)
  d = d + timedelta(days=1)


